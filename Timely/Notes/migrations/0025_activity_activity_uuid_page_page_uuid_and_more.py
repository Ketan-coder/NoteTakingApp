# Generated by Django 5.0.4 on 2025-03-16 10:34

from django.db import migrations, models
import uuid
def generate_unique_tokens(apps, schema_editor):
    Page = apps.get_model("Notes", "Page")  # Adjust 'Users' to your app name
    for page in Page.objects.all():
        if page.page_uuid is None:
            page.page_uuid = uuid.uuid4()
            page.save()
    Activity = apps.get_model("Notes", "Activity")  # Adjust 'Users' to your app name
    for activity in Activity.objects.all():
        if activity.activity_uuid is None:
            activity.activity_uuid = uuid.uuid4()
            activity.save()
    Remainder = apps.get_model("Notes", "Remainder")  # Adjust 'Users' to your app name
    for remainder in Remainder.objects.all():
        if remainder.remainder_uuid is None:
            remainder.remainder_uuid = uuid.uuid4()
            remainder.save()
    SharedNotebook = apps.get_model("Notes", "SharedNotebook")  # Adjust 'Users' to your app name
    for sharednotebook in SharedNotebook.objects.all():
        if sharednotebook.sharednotebook_uuid is None:
            sharednotebook.sharednotebook_uuid = uuid.uuid4()
            sharednotebook.save()
    StickyNotes = apps.get_model("Notes", "StickyNotes")  # Adjust 'Users' to your app name
    for stickynotes in StickyNotes.objects.all():
        if stickynotes.stickynotes_uuid is None:
            stickynotes.stickynotes_uuid = uuid.uuid4()
            stickynotes.save()
    SubPage = apps.get_model("Notes", "SubPage")  # Adjust 'Users' to your app name
    for subpage in SubPage.objects.all():
        if subpage.subpage_uuid is None:
            subpage.subpage_uuid = uuid.uuid4()
            subpage.save()
    Todo = apps.get_model("Notes", "Todo")  # Adjust 'Users' to your app name
    for todo in Todo.objects.all():
        if todo.todo_uuid is None:
            todo.todo_uuid = uuid.uuid4()
            todo.save()
    # Notebook = apps.get_model("Notes", "Notebook")  # Adjust 'Users' to your app name
    # for notebook in Notebook.objects.all():
    #     if notebook.notebook_uuid is None:
    #         notebook.notebook_uuid = uuid.uuid4()
    #         notebook.save()


class Migration(migrations.Migration):

    dependencies = [
        ('Notes', '0024_notebook_notebook_uuid'),
    ]

    operations = [
        migrations.AddField(
            model_name='activity',
            name='activity_uuid',
            field=models.UUIDField(blank=True, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='page',
            name='page_uuid',
            field=models.UUIDField(blank=True, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='remainder',
            name='remainder_uuid',
            field=models.UUIDField(blank=True, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='sharednotebook',
            name='sharednotebook_uuid',
            field=models.UUIDField(blank=True, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='stickynotes',
            name='stickynotes_uuid',
            field=models.UUIDField(blank=True, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='subpage',
            name='subpage_uuid',
            field=models.UUIDField(blank=True, null=True, unique=True),
        ),
        migrations.AddField(
            model_name='todo',
            name='todo_uuid',
            field=models.UUIDField(blank=True, null=True, unique=True),
        ),
        # migrations.AlterField(
        #     model_name='notebook',
        #     name='notebook_uuid',
        #     field=models.UUIDField(blank=True, null=True, unique=True),
        # ),
        migrations.RunPython(
            generate_unique_tokens, reverse_code=migrations.RunPython.noop
        ),
        # migrations.AlterField(
        #     model_name="notebook",
        #     name="notebook_uuid",
        #     field=models.UUIDField(
        #         unique=True, default=uuid.uuid4, editable=False
        #     ),  # Remove NULL constraint
        # ),
        migrations.AlterField(
            model_name="activity",
            name="activity_uuid",
            field=models.UUIDField(
                unique=True, default=uuid.uuid4, editable=False
            ),  # Remove NULL constraint
        ),
        migrations.AlterField(
            model_name="page",
            name="page_uuid",
            field=models.UUIDField(
                unique=True, default=uuid.uuid4, editable=False
            ),  # Remove NULL constraint
        ),
        migrations.AlterField(
            model_name="remainder",
            name="remainder_uuid",
            field=models.UUIDField(
                unique=True, default=uuid.uuid4, editable=False
            ),  # Remove NULL constraint
        ),
        migrations.AlterField(
            model_name="sharednotebook",
            name="sharednotebook_uuid",
            field=models.UUIDField(
                unique=True, default=uuid.uuid4, editable=False
            ),  # Remove NULL constraint
        ),
        migrations.AlterField(
            model_name="stickynotes",
            name="stickynotes_uuid",
            field=models.UUIDField(
                unique=True, default=uuid.uuid4, editable=False
            ),  # Remove NULL constraint
        ),
        migrations.AlterField(
            model_name="subpage",
            name="subpage_uuid",
            field=models.UUIDField(
                unique=True, default=uuid.uuid4, editable=False
            ),  # Remove NULL constraint
        ),
        migrations.AlterField(
            model_name="todo",
            name="todo_uuid",
            field=models.UUIDField(
                unique=True, default=uuid.uuid4, editable=False
            ),  # Remove NULL constraint
        ),
    ]
